#ifndef _AFLOW_MATLAB_FUNCS_CPP_
#define _AFLOW_MATLAB_FUNCS_CPP_
// aflow_matlab_funcs.cpp automatic generated from MATLAB/*
#include <sstream>
// aflow_matlab_funcs.cpp automatic generated from MATLAB/param.m
std::string MATLAB_FUNCS_param(void){
   std::stringstream strstream; strstream << "\
% param.m" << std::endl;
   strstream << "% To load the default value of parameters, including:" << std::endl;
   strstream << "%     graphic for plotting" << std::endl;
   strstream << "%     simulation cells" << std::endl;
   strstream << "%     interaction potentials" << std::endl;
   strstream << "%     Xe bulk parameters" << std::endl;
   strstream << "%" << std::endl;
   strstream << "% 'param' should be called at the beginning of the parent script" << std::endl;
   strstream << "% in order to allow values overwriting. Examples of parameters" << std::endl;
   strstream << "% that might need to be overwritten:" << std::endl;
   strstream << "%     c_size" << std::endl;
   strstream << "%     zmax" << std::endl;
   strstream << "" << std::endl;
   strstream << "" << std::endl;
   strstream << "%------------space group--------" << std::endl;
   strstream << "   klabel_tri=['\\Gamma-X-V-Y-\\Gamma-Z-U-R-T-Z|X-U|Y-T|V-R'];" << std::endl;
   strstream << "klabel_mcl=['\\Gamma-B-A-Y-\\Gamma-Z-D-E-C-Z|B-D|Y-C|A-E'];" << std::endl;
   strstream << "klabel_mclc=['\\Gamma-A-L-V-\\Gamma-Y-M-A|V-Y|L-M'];" << std::endl;
   strstream << "klabel_orc=['\\Gamma-X-S-Y-\\Gamma-Z-U-R-T-Z|X-U|Y-T|S-R'];" << std::endl;
   strstream << "klabel_orcc=['\\Gamma-Y-T-Z-\\Gamma-S-R-Z'];" << std::endl;
   strstream << "klabel_orcf=['\\Gamma-Y-T-Z-\\Gamma-L-Y|Z-L-T'];" << std::endl;
   strstream << "klabel_orci=['\\Gamma-X-T-\\Gamma-R-W-S-\\Gamma-W-T'];" << std::endl;
   strstream << "klabel_tet=['\\Gamma-X-M-\\Gamma-Z-R-A-Z|X-R|M-A'];" << std::endl;
   strstream << "klabel_bct=['\\Gamma-X-M-\\Gamma-N-P-X|\\Gamma-P'];" << std::endl;
   strstream << "klabel_rhl=['\\Gamma-M-K-\\Gamma-A-L-H-A|M-L|K-H'];" << std::endl;
   strstream << "klabel_hex=['\\Gamma-M-K-\\Gamma-A-L-H-A|M-L|K-H'];" << std::endl;
   strstream << "klabel_cub=['\\Gamma-X-M-\\Gamma-R-X|M-R'];" << std::endl;
   strstream << "klabel_fcc=['\\Gamma-X-W-K-\\Gamma-L-U-X|U-W-L-K|W-\\Gamma'];" << std::endl;
   strstream << "klabel_bcc=['\\Gamma-H-N-\\Gamma-P-H|P-N'];" << std::endl;
   strstream << "%----old version-----" << std::endl;
   strstream << "klabels(12)=struct('data',[',\\Gamma,A,M,Y,\\Gamma,V,L,A,']);" << std::endl;
   strstream << "for i=13:15" << std::endl;
   strstream << "	klabels(i)=klabels(12);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "klabels(25)=struct('data',[',\\Gamma,X,S,Y,\\Gamma,Z,U,R,T,Z|X,U|S,R|Y,T,']);" << std::endl;
   strstream << "for i=26:34" << std::endl;
   strstream << "	klabels(i)=klabels(25);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "klabels(47)=struct('data',[',\\Gamma,X,U,R,T,Z,\\Gamma,Y,S,R,']);" << std::endl;
   strstream << "for i=48:62" << std::endl;
   strstream << "   klabels(i)=klabels(47);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "klabels(99)=struct('data',[',\\Gamma,X,M,\\Gamma,Z,R,A,Z|X,R|M,A,']);" << std::endl;
   strstream << "for i=100:106" << std::endl;
   strstream << "   klabels(i)=klabels(99);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "klabels(150)=struct('data',[',\\Gamma,A,H,K,\\Gamma,k,h,A,H,h,k,K,']);" << std::endl;
   strstream << "klabels(152)=klabels(150);" << std::endl;
   strstream << "klabels(154)=klabels(150);" << std::endl;
   strstream << "klabels(160)=struct('data',[',\\Gamma,L,F,\\Gamma,T,F|L,T,']);" << std::endl;
   strstream << "klabels(161)=klabels(160);" << std::endl;
   strstream << "klabels(164)=struct('data',[',\\Gamma,K,H,A,\\Gamma,M,L,A,L,H,K,M,']);" << std::endl;
   strstream << "klabels(165)=klabels(164);" << std::endl;
   strstream << "klabels(166)=struct('data',[',\\Gamma,T,f,\\Gamma,L,T,']);" << std::endl;
   strstream << "klabels(167)=klabels(166);" << std::endl;
   strstream << "klabels(175)=struct('data',[',\\Gamma,K,H,A,\\Gamma,M,L,A,L,H,K,M,']);" << std::endl;
   strstream << "klabels(176)=klabels(175);" << std::endl;
   strstream << "klabels(216)=struct('data',[',\\Gamma,X,W,K,\\Gamma,L,U,X,U,W,L,']);" << std::endl;
   strstream << "for i=217:219" << std::endl;
   strstream << "	klabels(i)=klabels(216);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "klabels(217)=struct('data',[',\\Gamma,H,N,\\Gamma,P,H,P,N,']);" << std::endl;
   strstream << "for i=218:220" << std::endl;
   strstream << "	klabels(i)=klabels(217);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "klabels(221)=struct('data',[',\\Gamma,X,M,\\Gamma,R,X,R,M,']);" << std::endl;
   strstream << "for i=222:224" << std::endl;
   strstream << "  klabels(i)=klabels(221);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "klabels(225)=struct('data',[',\\Gamma,X,W,K,\\Gamma,L,U,X,U,W,L,']);" << std::endl;
   strstream << "for i=226:228" << std::endl;
   strstream << "  klabels(i)=klabels(225);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "klabels(229)=struct('data',[',\\Gamma,H,N,\\Gamma,P,H,P,N,']);" << std::endl;
   strstream << "klabels(230)=klabels(229);" << std::endl;
   strstream << "" << std::endl;
   strstream << "%-------------UNIT-----------" << std::endl;
   strstream << "kB = 1.3806503e-23;" << std::endl;
   strstream << "eV = 1.60217646e-19;" << std::endl;
   strstream << "Navo = 6.02214179e23;" << std::endl;
   strstream << "cal2eV = 2.61144768e19;" << std::endl;
   strstream << "eps0 = 8.85418781e-12;" << std::endl;
   strstream << "meV2K   = 11.6044;      % 1 meV = 11.6044 K" << std::endl;
   strstream << "NA      = 6.0221367e23;     % Avogadro number" << std::endl;
   strstream << "meV2J   = 1.60217733e-22;    % 1 meV = 1.602e-22 J" << std::endl;
   strstream << "  hbar=6.626e-34/2/pi;" << std::endl;
   strstream << "me=9.109e-31;" << std::endl;
   strstream << "Cr2me=hbar^2/(eV*1e-20)/me;" << std::endl;
   strstream << "" << std::endl;
   strstream << "%----------------------------" << std::endl;
   strstream << "disp('LOADINGOA parameters')" << std::endl;
   strstream << "" << std::endl;
   strstream << "     bcc=0.5*sqrt(3);" << std::endl;
   strstream << "     fcc=0.5*sqrt(2);" << std::endl;
   strstream << "     hcp=0.5*sqrt(2);" << std::endl;
   strstream << "     dia=0.25*sqrt(2);" << std::endl;
   strstream << "" << std::endl;
   strstream << "%******************* EAM atomic charge density from Herman ***********" << std::endl;
   strstream << "% [rhoe beta re]" << std::endl;
   strstream << "H=[1.639 2.798 0.74]';" << std::endl;
   strstream << "He=[0.0005 25.59 4.97]';" << std::endl;
   strstream << "" << std::endl;
   strstream << "Li=[0.038 4.813 2.67]';" << std::endl;
   strstream << "Be=[0.031 7.174 2.45]';" << std::endl;
   strstream << "B=[0.299 5.758 1.59]';" << std::endl;
   strstream << "C=[0.932 5.473 1.24]';" << std::endl;
   strstream << "N=[1.447 5.645 1.1]';" << std::endl;
   strstream << "O=[0.861 5.846 1.21]';" << std::endl;
   strstream << "F=[0.217 7.233 1.41]';" << std::endl;
   strstream << "Ne=[0.0005 15.47 3.4]';" << std::endl;
   strstream << "" << std::endl;
   strstream << "Na=[0.021 5.552 3.08]';" << std::endl;
   strstream << "Mg=[0.001 10.03 3.89]';" << std::endl;
   strstream << "Al=[0.026 7.182 2.70]';" << std::endl;
   strstream << "Si=[0.072 7.171 2.25]';" << std::endl;
   strstream << "P=[0.176 7.079 1.89]';" << std::endl;
   strstream << "S=[0.184 6.908 1.89]';" << std::endl;
   strstream << "Cl=[0.088 8.099 1.99]';" << std::endl;
   strstream << "Ar=[0.0005 15.89 3.8]';" << std::endl;
   strstream << "" << std::endl;
   strstream << "K=[0.008 6.412 3.92]';" << std::endl;
   strstream << "Ca=[0.002 9.719 4.28]';" << std::endl;
   strstream << "Sc=[0.058 6.053 2.7]';" << std::endl;
   strstream << "Ti=[0.287 4.333 1.94]';" << std::endl;
   strstream << "V=[0.394 4.025 1.78]';" << std::endl;
   strstream << "Cr=[0.297 4.538 1.68]';" << std::endl;
   strstream << "Mn=[0.006 8.719 3.4]';" << std::endl;
   strstream << "Fe=[0.192 5.214 2.0]';" << std::endl;
   strstream << "Co=[0.090 5.945 2.28]';" << std::endl;
   strstream << "Ni=[0.126 5.447 2.15]';" << std::endl;
   strstream << "Cu=[0.052 5.864 2.22]';" << std::endl;
   strstream << "Zn=[0.0005 14.63 4.8]';" << std::endl;
   strstream << "Ga=[0.018 7.257 2.8]';" << std::endl;
   strstream << "Ge=[0.042 7.419 2.44]';" << std::endl;
   strstream << "As=[0.110 7.365 2.1]';" << std::endl;
   strstream << "Se=[0.097 7.415 2.17]';" << std::endl;
   strstream << "Br=[0.046 8.561 2.28]';" << std::endl;
   strstream << "Kr=[0.0005 15.57 4.0]';" << std::endl;
   strstream << "" << std::endl;
   strstream << "Rb=[0.006 6.788 4.21]';" << std::endl;
   strstream << "Sr=[0.002 9.614 4.45]';" << std::endl;
   strstream << "Y=[0.037 6.593 3.0]';" << std::endl;
   strstream << "Zr=[0.158 5.287 2.3]';" << std::endl;
   strstream << "Nb=[0.145 5.556 2.08]';" << std::endl;
   strstream << "Mo=[0.201 5.621 1.94]';" << std::endl;
   strstream << "Tc=[0.365 4.968 1.88]';" << std::endl;
   strstream << "Ru=[0.047 6.360 2.4]';" << std::endl;
   strstream << "Rh=[0.020 6.981 2.68]';" << std::endl;
   strstream << "Pd=[0.017 8.389 2.5]';" << std::endl;
   strstream << "Ag=[0.028 6.619 2.53]';" << std::endl;
   strstream << "Cd=[0.0005 13.34 4.5]';" << std::endl;
   strstream << "In=[0.011 7.774 3.1]';" << std::endl;
   strstream << "Sn=[0.026 7.893 2.75]';" << std::endl;
   strstream << "Sb=[0.086 7.490 2.34]';" << std::endl;
   strstream << "Te=[0.047 8.157 2.56]';" << std::endl;
   strstream << "I=[0.025 9.180 2.67]';" << std::endl;
   strstream << "Xe=[0.0005 15.86 4.4]';" << std::endl;
   strstream << "" << std::endl;
   strstream << "Cs=[0.004 7.214 4.65]';" << std::endl;
   strstream << "Ba=[0.001 10.02 4.9]';" << std::endl;
   strstream << "La=[0.009 8.106 3.89]';" << std::endl;
   strstream << "Ce=[0.013 7.575 3.682]';" << std::endl;
   strstream << "Pr=[0.016 7.342 3.646]';" << std::endl;
   strstream << "Nd=[0.015 7.361 3.632]';" << std::endl;
   strstream << "Pm=[0.015 7.356 3.602]';" << std::endl;
   strstream << "Sm=[0.017 7.327 3.56]';" << std::endl;
   strstream << "Eu=[0.016 7.306 3.542]';" << std::endl;
   strstream << "Gd=[0.015 7.724 3.47]';" << std::endl;
   strstream << "Tb=[0.017 7.323 3.464]';" << std::endl;
   strstream << "Dy=[0.017 7.303 3.42]';" << std::endl;
   strstream << "Ho=[0.018 7.323 3.392]';" << std::endl;
   strstream << "Er=[0.019 7.271 3.346]';" << std::endl;
   strstream << "Tm=[0.020 7.284 3.32]';" << std::endl;
   strstream << "Yb=[0.020 7.25 3.274]';" << std::endl;
   strstream << "Lu=[0.023 6.972 3.342]';" << std::endl;
   strstream << "Hf=[0.138 5.581 2.35]';" << std::endl;
   strstream << "Ta=[0.142 6.016 2.30]';" << std::endl;
   strstream << "W=[0.137 6.176 2.27]';" << std::endl;
   strstream << "Re=[0.242 3.686 2.04]';" << std::endl;
   strstream << "Os=[0.029 7.771 2.76]';" << std::endl;
   strstream << "Ir=[0.244 6.055 1.96]';" << std::endl;
   strstream << "Pt=[0.021 7.539 2.5]';" << std::endl;
   strstream << "Au=[0.024 7.553 2.47]';" << std::endl;
   strstream << "Hg=[0.001 11.71 3.63]';" << std::endl;
   strstream << "Tl=[0.004 8.85 3.5]';" << std::endl;
   strstream << "Pb=[0.002 8.368 2.93]';" << std::endl;
   strstream << "Bi=[0.052 7.489 2.66]';" << std::endl;
   strstream << "Po=[0.017 8.987 3.0]';" << std::endl;
   strstream << "At=[0.009 10.21 3.09]';" << std::endl;
   strstream << "Rn=[0.0005 15.12 4.5]';" << std::endl;
   strstream << "" << std::endl;
   strstream << "%******************* graphic parameters *****************" << std::endl;
   strstream << "FONTDIM=16;" << std::endl;
   strstream << "FONTDIMsmall=14;" << std::endl;
   strstream << "FONTDIMbig=18;" << std::endl;
   strstream << "COLOR=[0 0 0];" << std::endl;
   strstream << "LINEWIDTH=1.2;" << std::endl;
   strstream << "MARKERSIZE=25;" << std::endl;
   strstream << "PAPERPOSITION=[1 1 5 4]; % old for printing papers" << std::endl;
   strstream << "PAPERPOSITION=0.80*[0 0 16 9]; % standard ratio is 16/9;" << std::endl;
   strstream << "PAPERSIZE=[8.5 11];" << std::endl;
   strstream << "POSITION=[420 540 560 420]; % video" << std::endl;
   strstream << "AXISWIDTH=1;" << std::endl;
   strstream << "AXISPOSITION=[0.136646 0.164179 0.774845 0.74678];" << std::endl;
   strstream << "VERBOSE=1;" << std::endl;
   strstream << "" << std::endl;
   strstream << "" << std::endl;
   strstream << "%******************* simulation cell parameters **********" << std::endl;
   strstream << "c_size  = 1;" << std::endl;
   strstream << "zmax    = 100;  %[A]" << std::endl;
   strstream << "zoffset = 1.92; %[A]" << std::endl;
   strstream << "qx      = 51.3*c_size;  % [A]" << std::endl;
   strstream << "qy      = 51.3*c_size;  % [A]" << std::endl;
   strstream << "qz      = zmax-zoffset; % [A]" << std::endl;
   strstream << "area    = qx*qy/100;    % [nm^2]" << std::endl;
   strstream << "" << std::endl;
   strstream << "%******************* Bulk Xe parameters ******************" << std::endl;
   strstream << "nnBulk  = 0.44;         % [nm]" << std::endl;
   strstream << "covBulk = 1/(nnBulk^2*sin(pi/3));" << std::endl;
   strstream << "%meV2K   = 11.6044;      % 1 meV = 11.6044 K" << std::endl;
   strstream << "%NA      = 6.0221367e23;     % Avogadro number" << std::endl;
   strstream << "%meV2J   = 1.60217733e-22;    % 1 meV = 1.602e-22 J" << std::endl;
   strstream << "kJpermol2meVperatom = 1e3/meV2J/NA; " << std::endl;
   strstream << "%******************** Potential parameters ***************" << std::endl;
   strstream << "sigmaNe = 2.78;       % [A] PRE 59, 864 ref 13" << std::endl;
   strstream << "epsNe   = 2.92;       % [meV]" << std::endl;
   strstream << "sigmaAr = 3.4;        % PRE 59, 864 ref 13" << std::endl;
   strstream << "epsAr   = 10.32;" << std::endl;
   strstream << "sigmaKr = 3.6;        % PRB 62, 2173 ref 28" << std::endl;
   strstream << "epsKr   = 14.73;" << std::endl;
   strstream << "sigmaXe = 4.1;        % PRB 62, 2173 ref 28" << std::endl;
   strstream << "epsXe   = 221/meV2K;" << std::endl;
   strstream << "sigmaAl = 2.5;" << std::endl;
   strstream << "epsAl   = 30.245;" << std::endl;
   strstream << "sigmaTM = 2.2;" << std::endl;
   strstream << "epsTM   = 27.777;" << std::endl;
   strstream << "sigmaIN1 = sigmaXe;" << std::endl;
   strstream << "epsIN1   = epsNe;" << std::endl;
   strstream << "sigmaDX1 = sigmaNe;" << std::endl;
   strstream << "epsDX1   = epsXe;" << std::endl;
   strstream << "sigmaDX2 = 3.9;" << std::endl;
   strstream << "epsDX2   = epsXe;" << std::endl;
   strstream << "sigmaIX1 = 5.5;" << std::endl;
   strstream << "epsIX1   = epsXe;" << std::endl;
   strstream << "sigmaIX2 = 6.749;" << std::endl;
   strstream << "epsIX2   = epsXe;" << std::endl;
   strstream << "sigmaMethane = 3.817; % a book by J.O. Hirschfelder, C.F. Curtiss, and R.B. Bird," << std::endl;
   strstream << "                      % Molecular theory of gases and liquids, John Wiley & Sons, NY" << std::endl;
   strstream << "                      % pg 1111 (1954); original ref is A. Michels and G.W. Nederbragt," << std::endl;
   strstream << "                      % Physica 2, 1000 (1935)" << std::endl;
   strstream << "epsMethane = 148.2/meV2K; % idem" << std::endl;
   strstream << "sigmaEthane = 3.954; % same book, in the book it refers to another book by" << std::endl;
   strstream << "  % D.M. Newitt, Design of High Pressure Plant and the Properties of Fluids at High Pressure," << std::endl;
   strstream << "  % Oxford Univ Press (1940)" << std::endl;
   strstream << "epsEthane = 243/meV2K; % idem sigmaEthane" << std::endl;
   strstream << "" << std::endl;
   strstream << "" << std::endl;
   strstream << "sigmaNeAl = (sigmaNe+sigmaAl)/2;" << std::endl;
   strstream << "sigmaNeTM = (sigmaNe+sigmaTM)/2;" << std::endl;
   strstream << "sigmaArAl = (sigmaAr+sigmaAl)/2;" << std::endl;
   strstream << "sigmaArTM = (sigmaAr+sigmaTM)/2;" << std::endl;
   strstream << "sigmaKrAl = (sigmaKr+sigmaAl)/2;" << std::endl;
   strstream << "sigmaKrTM = (sigmaKr+sigmaTM)/2;" << std::endl;
   strstream << "sigmaXeAl = (sigmaXe+sigmaAl)/2;" << std::endl;
   strstream << "sigmaXeTM = (sigmaXe+sigmaTM)/2;" << std::endl;
   strstream << "sigmaIN1Al = (sigmaIN1+sigmaAl)/2;" << std::endl;
   strstream << "sigmaIN1TM = (sigmaIN1+sigmaTM)/2;" << std::endl;
   strstream << "sigmaIX1Al = (sigmaIX1+sigmaAl)/2;" << std::endl;
   strstream << "sigmaIX1TM = (sigmaIX1+sigmaTM)/2;" << std::endl;
   strstream << "sigmaIX2Al = (sigmaIX2+sigmaAl)/2;" << std::endl;
   strstream << "sigmaIX2TM = (sigmaIX2+sigmaTM)/2;" << std::endl;
   strstream << "sigmaDX1Al = (sigmaDX1+sigmaAl)/2;" << std::endl;
   strstream << "sigmaDX1TM = (sigmaDX1+sigmaTM)/2;" << std::endl;
   strstream << "sigmaDX2Al = (sigmaDX2+sigmaAl)/2;" << std::endl;
   strstream << "sigmaDX2TM = (sigmaDX2+sigmaTM)/2;" << std::endl;
   strstream << "" << std::endl;
   strstream << "" << std::endl;
   strstream << "epsNeAl = (epsNe*epsAl)^0.5;" << std::endl;
   strstream << "epsNeTM = (epsNe*epsTM)^0.5;" << std::endl;
   strstream << "epsArAl = (epsAr*epsAl)^0.5;" << std::endl;
   strstream << "epsArTM = (epsAr*epsTM)^0.5;" << std::endl;
   strstream << "epsKrAl = (epsKr*epsAl)^0.5;" << std::endl;
   strstream << "epsKrTM = (epsKr*epsTM)^0.5;" << std::endl;
   strstream << "epsXeAl = (epsXe*epsAl)^0.5;" << std::endl;
   strstream << "epsXeTM = (epsXe*epsTM)^0.5;" << std::endl;
   strstream << "" << std::endl;
   strstream << "epsgsNe = 43.89; % [meV] from min(pot_avg)" << std::endl;
   strstream << "epsgsAr = 108.37;" << std::endl;
   strstream << "epsgsKr = 140.18;" << std::endl;
   strstream << "epsgsXe = 193.25;" << std::endl;
   strstream << "epsgsIX1 = epsgsXe;" << std::endl;
   strstream << "epsgsIN1 = epsgsNe;" << std::endl;
   strstream << "epsgsDX1 = epsgsXe;" << std::endl;
   strstream << "epsgsDX2 = epsgsXe;" << std::endl;
   strstream << "epsgsIX1 = epsgsXe;" << std::endl;
   strstream << "epsgsIX2 = epsgsXe;" << std::endl;
   strstream << "" << std::endl;
   strstream << "%Al(73)Ni(10)Co(17)" << std::endl;
   strstream << "x_Al = .73;" << std::endl;
   strstream << "x_Ni = .1;" << std::endl;
   strstream << "x_Co = .17;" << std::endl;
   strstream << "sigmagsNe = x_Al*sigmaNeAl + x_Ni*sigmaNeTM + x_Co*sigmaNeTM;" << std::endl;
   strstream << "sigmagsAr = x_Al*sigmaArAl + x_Ni*sigmaArTM + x_Co*sigmaArTM;" << std::endl;
   strstream << "sigmagsKr = x_Al*sigmaKrAl + x_Ni*sigmaKrTM + x_Co*sigmaKrTM;" << std::endl;
   strstream << "sigmagsXe = x_Al*sigmaXeAl + x_Ni*sigmaXeTM + x_Co*sigmaXeTM;" << std::endl;
   strstream << "sigmagsG1 = sigmagsXe;" << std::endl;
   strstream << "sigmagsG2 = sigmagsNe;" << std::endl;
   strstream << "sigmagsIX1 = x_Al*sigmaIX1Al + x_Ni*sigmaIX1TM + x_Co*sigmaIX1TM;" << std::endl;
   strstream << "sigmagsIN1 = x_Al*sigmaIN1Al + x_Ni*sigmaIN1TM + x_Co*sigmaIN1TM;" << std::endl;
   strstream << "sigmagsDX1 = x_Al*sigmaDX1Al + x_Ni*sigmaDX1TM + x_Co*sigmaDX1TM;" << std::endl;
   strstream << "sigmagsDX2 = x_Al*sigmaDX2Al + x_Ni*sigmaDX2TM + x_Co*sigmaDX2TM;" << std::endl;
   strstream << "sigmagsIX1 = x_Al*sigmaIX1Al + x_Ni*sigmaIX1TM + x_Co*sigmaIX1TM;" << std::endl;
   strstream << "sigmagsIX2 = x_Al*sigmaIX2Al + x_Ni*sigmaIX2TM + x_Co*sigmaIX2TM;" << std::endl;
   strstream << "" << std::endl;
   strstream << "%******************** Auxiliary Parameters ***************" << std::endl;
   strstream << "% extracted from rdist.out of the first layer at point just " << std::endl;
   strstream << "% before the 2nd layer formd (rechecked the source!)" << std::endl;
   strstream << "" << std::endl;
   strstream << "nnfactR2=0.5+cos(30/180*pi); % midpoint between 1st and 2nd nearest neighbors" << std::endl;
   strstream << "nnfactR1=1.25;" << std::endl;
   strstream << "" << std::endl;
   strstream << "nnXe=4.4;" << std::endl;
   strstream << "zlistXe=[4.5, 8.2, 11.9, 15.6, 19.3];" << std::endl;
   strstream << "NlistXe=[100, 160];" << std::endl;
   strstream << "" << std::endl;
   strstream << "nnKr=3.9;" << std::endl;
   strstream << "zlistKr=[4.1, 7.3, 10.5, 13.7, 16.9];" << std::endl;
   strstream << "NlistKr=[145, 190];" << std::endl;
   strstream << "" << std::endl;
   strstream << "nnAr=3.7;" << std::endl;
   strstream << "zlistAr=[3.8, 6.7, 9.6, 12.5, 15.4];" << std::endl;
   strstream << "NlistAr=[130, 210];" << std::endl;
   strstream << "" << std::endl;
   strstream << "nnNe=2.9;" << std::endl;
   strstream << "zlistNe=[3.5, 6.0, 8.5, 11.0, 13.5];" << std::endl;
   strstream << "NlistNe=[140, 375];" << std::endl;
   strstream << "" << std::endl;
   strstream << "nnG1=nnXe; nnIN1=nnG1;" << std::endl;
   strstream << "zlistG1=zlistXe;" << std::endl;
   strstream << "NlistG1=NlistXe;" << std::endl;
   strstream << "" << std::endl;
   strstream << "nnG2=nnNe; nnDX1 = nnG2;" << std::endl;
   strstream << "zlistG2=zlistNe;" << std::endl;
   strstream << "NlistG2=NlistNe;" << std::endl;
   strstream << "" << std::endl;
   strstream << "nnG3=6.049; nnIX1 = nnG3;" << std::endl;
   strstream << "zlistG3=[6.139 11.0298 15.9207 20.8115 25.7024];" << std::endl;
   strstream << "NlistG3=[60 90];" << std::endl;
   strstream << "" << std::endl;
   strstream << "nnG4=7.368; nnIX2 =nnG4;" << std::endl;
   strstream << "zlistG4=[7.2045 13.4064 19.6082 25.8101 32.0119];" << std::endl;
   strstream << "NlistG4=[45 55];" << std::endl;
   strstream << "" << std::endl;
   strstream << "nnG5=4.158; nnDX2 =nnG5;" << std::endl;
   strstream << "zlistG5=[4.3715 7.9315 11.492 15.052 18.612];" << std::endl;
   strstream << "NlistG5=[100 170];" << std::endl;
   strstream << "" << std::endl;
   strstream << "%************ Quasicrystal Parameter ************" << std::endl;
   strstream << "tau = (1+sqrt(5))/2;" << std::endl;
   strstream << "lambda = 4.5;" << std::endl;
   strstream << "%lambda2 = lambda/2/sin(36/180*pi); % distance between a point in central pentagon to the center of the pentagon, this will be compared to sigmagg to analyze the existence of 5- to 6- fold transition" << std::endl;
   strstream << "  lambda2 = 4.0062; % is the 3D distance of the minima location between the minimum at the center of " << std::endl;
   strstream << "                    % the central pentagon and the minimum at one of its vertices" << std::endl;
   strstream << "mismatchNe = (sigmaNe-lambda2)/lambda2;" << std::endl;
   strstream << "mismatchAr = (sigmaAr-lambda2)/lambda2;" << std::endl;
   strstream << "mismatchKr = (sigmaKr-lambda2)/lambda2;" << std::endl;
   strstream << "mismatchXe = (sigmaXe-lambda2)/lambda2;" << std::endl;
   strstream << "mismatchIN1 = (sigmaIN1-lambda2)/lambda2;" << std::endl;
   strstream << "mismatchDX1 = (sigmaDX1-lambda2)/lambda2;" << std::endl;
   strstream << "mismatchDX2 = (sigmaDX2-lambda2)/lambda2;" << std::endl;
   strstream << "mismatchIX1 = (sigmaIX1-lambda2)/lambda2;" << std::endl;
   strstream << "mismatchIX2 = (sigmaIX2-lambda2)/lambda2;" << std::endl;
   strstream << "" << std::endl;
   strstream << "lambdas=4.5; % pentagon side" << std::endl;
   strstream << "lambdac=4.0062; % look at lambda2" << std::endl;
   strstream << "lambdar=3.81; % row-to-row distance of decagonal AlNiCo QC" << std::endl;
   strstream << "LQC = tau*2.43; % tau*S, where S is the side length of rhombic Penrose tiling" << std::endl;
   strstream << "" << std::endl;
   strstream << "  lambdamNe = (nnNe*sin(pi/3) - lambdar)/lambdar;" << std::endl;
   strstream << "  lambdamAr = (nnAr*sin(pi/3) - lambdar)/lambdar;" << std::endl;
   strstream << "  lambdamKr = (nnKr*sin(pi/3) - lambdar)/lambdar;" << std::endl;
   strstream << "  lambdamXe = (nnXe*sin(pi/3) - lambdar)/lambdar;" << std::endl;
   strstream << "  lambdamIN1 = (nnIN1*sin(pi/3) - lambdar)/lambdar;" << std::endl;
   strstream << "  lambdamDX1 = (nnDX1*sin(pi/3) - lambdar)/lambdar;" << std::endl;
   strstream << "  lambdamDX2 = (nnDX2*sin(pi/3) - lambdar)/lambdar;" << std::endl;
   strstream << "  lambdamIX1 = (nnIX1*sin(pi/3) - lambdar)/lambdar;" << std::endl;
   strstream << "  lambdamIX2 = (nnIX2*sin(pi/3) - lambdar)/lambdar;" << std::endl;
   strstream << "" << std::endl;
   strstream << "sigma=[sigmaNe sigmaAr sigmaKr sigmaXe ..." << std::endl;
   strstream << "sigmaIN1 sigmaDX1 sigmaDX2 sigmaIX1 sigmaIX2]';" << std::endl;
   strstream << "k1=2^(1/6); % r = k1*sigma   r is relaxed dist for a pair of atoms" << std::endl;
   strstream << "k2=0.97123; % nn = k2*r    nn is nearest neighbor at ground state (0 K)" << std::endl;
   strstream << "            %              for 3D fcc" << std::endl;
   strstream << "            % ref: LW Bruch, Surf Science 59, 1-16 (1976)" << std::endl;
   strstream << "k3=sin(pi/3); % row-to-row = k3*nn   row distance in planar trilattice" << std::endl;
   strstream << "k=k1*k2*k3;" << std::endl;
   strstream << "dm=(sigma*k-lambdar)/lambdar;" << std::endl;
   strstream << "" << std::endl;
   strstream << "% nobQCdist = average z-position of adsorbates' first layer" << std::endl;
   strstream << "%             - average z-position of QC's top layer" << std::endl;
   strstream << "% the top atoms of QC are in z=14.28 A, but the average z-position" << std::endl;
   strstream << "% of the top layer of QC is at z=17.21 A." << std::endl;
   strstream << "" << std::endl;
   strstream << "nobQCdist=[2.36 2.59 2.71 3.05];" << std::endl;
   strstream << "" << std::endl;
   strstream << "%********** conversion from G to IN or DX or IX" << std::endl;
   strstream << "fictgas = ['G1 --> IN1';'G2 --> DX1';'G3 --> IX1';'G4 --> IX2';'G5 --> DX2'];" << std::endl;
   strstream << "%********************** END ******************************" << std::endl;
   strstream << "mygray=[         0         0         0;..." << std::endl;
   strstream << "%    0.0317    0.0317    0.0317;..." << std::endl;
   strstream << "    0.0635    0.0635    0.0635;..." << std::endl;
   strstream << "%    0.0952    0.0952    0.0952;..." << std::endl;
   strstream << "    0.1270    0.1270    0.1270;..." << std::endl;
   strstream << "%    0.1587    0.1587    0.1587;..." << std::endl;
   strstream << "    0.1905    0.1905    0.1905;..." << std::endl;
   strstream << "%    0.2222    0.2222    0.2222;..." << std::endl;
   strstream << "    0.2540    0.2540    0.2540;..." << std::endl;
   strstream << "%    0.2857    0.2857    0.2857;..." << std::endl;
   strstream << "    0.3175    0.3175    0.3175;..." << std::endl;
   strstream << "%    0.3492    0.3492    0.3492;..." << std::endl;
   strstream << "    0.3810    0.3810    0.3810;..." << std::endl;
   strstream << "%    0.4127    0.4127    0.4127;..." << std::endl;
   strstream << "    0.4444    0.4444    0.4444;..." << std::endl;
   strstream << "%    0.4762    0.4762    0.4762;..." << std::endl;
   strstream << "    0.5079    0.5079    0.5079;..." << std::endl;
   strstream << "%    0.5397    0.5397    0.5397;..." << std::endl;
   strstream << "    0.5714    0.5714    0.5714;..." << std::endl;
   strstream << "%    0.6032    0.6032    0.6032;..." << std::endl;
   strstream << "    0.6349    0.6349    0.6349;..." << std::endl;
   strstream << "%    0.6667    0.6667    0.6667;..." << std::endl;
   strstream << "    0.6984    0.6984    0.6984;..." << std::endl;
   strstream << "%    0.7302    0.7302    0.7302;..." << std::endl;
   strstream << "    0.7619    0.7619    0.7619;..." << std::endl;
   strstream << "%    0.7937    0.7937    0.7937;..." << std::endl;
   strstream << "    0.8254    0.8254    0.8254;..." << std::endl;
   strstream << "%    0.8571    0.8571    0.8571;..." << std::endl;
   strstream << "    0.8889    0.8889    0.8889;..." << std::endl;
   strstream << "%    0.9206    0.9206    0.9206;..." << std::endl;
   strstream << "%    0.9524    0.9524    0.9524;..." << std::endl;
   strstream << "    1.0000    1.0000    1.0000];" << std::endl;
   strstream << "" << std::endl;
   strstream << "blue=[         0         0    1.0000;..." << std::endl;
   strstream << "%    0.0159    0.0159    1.0000;..." << std::endl;
   strstream << "    0.0317    0.0317    1.0000;..." << std::endl;
   strstream << "%    0.0476    0.0476    1.0000;..." << std::endl;
   strstream << "    0.0635    0.0635    1.0000;..." << std::endl;
   strstream << "%    0.0794    0.0794    1.0000;..." << std::endl;
   strstream << "    0.0952    0.0952    1.0000;..." << std::endl;
   strstream << "%    0.1111    0.1111    1.0000;..." << std::endl;
   strstream << "    0.1270    0.1270    1.0000;..." << std::endl;
   strstream << "%    0.1429    0.1429    1.0000;..." << std::endl;
   strstream << "    0.1587    0.1587    1.0000;..." << std::endl;
   strstream << "%    0.1746    0.1746    1.0000;..." << std::endl;
   strstream << "    0.1905    0.1905    1.0000;..." << std::endl;
   strstream << "%    0.2063    0.2063    1.0000;..." << std::endl;
   strstream << "    0.2222    0.2222    1.0000;..." << std::endl;
   strstream << "%    0.2381    0.2381    1.0000;..." << std::endl;
   strstream << "    0.2540    0.2540    1.0000;..." << std::endl;
   strstream << "%    0.2698    0.2698    1.0000;..." << std::endl;
   strstream << "    0.2857    0.2857    1.0000;..." << std::endl;
   strstream << "%    0.3016    0.3016    1.0000;..." << std::endl;
   strstream << "    0.3175    0.3175    1.0000;..." << std::endl;
   strstream << "%    0.3333    0.3333    1.0000;..." << std::endl;
   strstream << "    0.3492    0.3492    1.0000;..." << std::endl;
   strstream << "%    0.3651    0.3651    1.0000;..." << std::endl;
   strstream << "    0.3810    0.3810    1.0000;..." << std::endl;
   strstream << "%    0.3968    0.3968    1.0000;..." << std::endl;
   strstream << "    0.4127    0.4127    1.0000;..." << std::endl;
   strstream << "%    0.4286    0.4286    1.0000;..." << std::endl;
   strstream << "    0.4444    0.4444    1.0000;..." << std::endl;
   strstream << "%    0.4603    0.4603    1.0000;..." << std::endl;
   strstream << "    0.4762    0.4762    1.0000;..." << std::endl;
   strstream << "%    0.4921    0.4921    1.0000;..." << std::endl;
   strstream << "    0.5079    0.5079    1.0000;..." << std::endl;
   strstream << "%    0.5238    0.5238    1.0000;..." << std::endl;
   strstream << "    0.5397    0.5397    1.0000;..." << std::endl;
   strstream << "%    0.5556    0.5556    1.0000;..." << std::endl;
   strstream << "    0.5714    0.5714    1.0000;..." << std::endl;
   strstream << "%    0.5873    0.5873    1.0000;..." << std::endl;
   strstream << "    0.6032    0.6032    1.0000;..." << std::endl;
   strstream << "%    0.6190    0.6190    1.0000;..." << std::endl;
   strstream << "    0.6349    0.6349    1.0000;..." << std::endl;
   strstream << "%    0.6508    0.6508    1.0000;..." << std::endl;
   strstream << "    0.6667    0.6667    1.0000;..." << std::endl;
   strstream << "%    0.6825    0.6825    1.0000;..." << std::endl;
   strstream << "    0.6984    0.6984    1.0000;..." << std::endl;
   strstream << "%    0.7143    0.7143    1.0000;..." << std::endl;
   strstream << "    0.7302    0.7302    1.0000;..." << std::endl;
   strstream << "%    0.7460    0.7460    1.0000;..." << std::endl;
   strstream << "    0.7619    0.7619    1.0000;..." << std::endl;
   strstream << "%    0.7778    0.7778    1.0000;..." << std::endl;
   strstream << "    0.7937    0.7937    1.0000;..." << std::endl;
   strstream << "%    0.8095    0.8095    1.0000;..." << std::endl;
   strstream << "    0.8254    0.8254    1.0000;..." << std::endl;
   strstream << "%    0.8413    0.8413    1.0000;..." << std::endl;
   strstream << "    0.8571    0.8571    1.0000;..." << std::endl;
   strstream << "%    0.8730    0.8730    1.0000;..." << std::endl;
   strstream << "    0.8889    0.8889    1.0000;..." << std::endl;
   strstream << "%    0.9048    0.9048    1.0000;..." << std::endl;
   strstream << "    0.9206    0.9206    1.0000;..." << std::endl;
   strstream << "%    0.9365    0.9365    1.0000;..." << std::endl;
   strstream << "    0.9524    0.9524    1.0000;..." << std::endl;
   strstream << "%    0.9683    0.9683    1.0000;..." << std::endl;
   strstream << "%    0.9841    0.9841    1.0000;..." << std::endl;
   strstream << "    1.0000    1.0000    1.0000];" << std::endl;
   strstream << "" << std::endl;
   strstream << "red=[    1.0000         0         0;..." << std::endl;
   strstream << "%    1.0000    0.0159    0.0159;..." << std::endl;
   strstream << "    1.0000    0.0317    0.0317;..." << std::endl;
   strstream << "%    1.0000    0.0476    0.0476;..." << std::endl;
   strstream << "    1.0000    0.0635    0.0635;..." << std::endl;
   strstream << "%    1.0000    0.0794    0.0794;..." << std::endl;
   strstream << "    1.0000    0.0952    0.0952;..." << std::endl;
   strstream << "%    1.0000    0.1111    0.1111;..." << std::endl;
   strstream << "    1.0000    0.1270    0.1270;..." << std::endl;
   strstream << "%    1.0000    0.1429    0.1429;..." << std::endl;
   strstream << "    1.0000    0.1587    0.1587;..." << std::endl;
   strstream << "%    1.0000    0.1746    0.1746;..." << std::endl;
   strstream << "    1.0000    0.1905    0.1905;..." << std::endl;
   strstream << "%    1.0000    0.2063    0.2063;..." << std::endl;
   strstream << "    1.0000    0.2222    0.2222;..." << std::endl;
   strstream << "%    1.0000    0.2381    0.2381;..." << std::endl;
   strstream << "    1.0000    0.2540    0.2540;..." << std::endl;
   strstream << "%    1.0000    0.2698    0.2698;..." << std::endl;
   strstream << "    1.0000    0.2857    0.2857;..." << std::endl;
   strstream << "%    1.0000    0.3016    0.3016;..." << std::endl;
   strstream << "    1.0000    0.3175    0.3175;..." << std::endl;
   strstream << "%    1.0000    0.3333    0.3333;..." << std::endl;
   strstream << "    1.0000    0.3492    0.3492;..." << std::endl;
   strstream << "%    1.0000    0.3651    0.3651;..." << std::endl;
   strstream << "    1.0000    0.3810    0.3810;..." << std::endl;
   strstream << "%    1.0000    0.3968    0.3968;..." << std::endl;
   strstream << "    1.0000    0.4127    0.4127;..." << std::endl;
   strstream << "%    1.0000    0.4286    0.4286;..." << std::endl;
   strstream << "    1.0000    0.4444    0.4444;..." << std::endl;
   strstream << "%    1.0000    0.4603    0.4603;..." << std::endl;
   strstream << "    1.0000    0.4762    0.4762;..." << std::endl;
   strstream << "%    1.0000    0.4921    0.4921;..." << std::endl;
   strstream << "    1.0000    0.5079    0.5079;..." << std::endl;
   strstream << "%    1.0000    0.5238    0.5238;..." << std::endl;
   strstream << "    1.0000    0.5397    0.5397;..." << std::endl;
   strstream << "%    1.0000    0.5556    0.5556;..." << std::endl;
   strstream << "    1.0000    0.5714    0.5714;..." << std::endl;
   strstream << "%    1.0000    0.5873    0.5873;..." << std::endl;
   strstream << "    1.0000    0.6032    0.6032;..." << std::endl;
   strstream << "%    1.0000    0.6190    0.6190;..." << std::endl;
   strstream << "    1.0000    0.6349    0.6349;..." << std::endl;
   strstream << "%    1.0000    0.6508    0.6508;..." << std::endl;
   strstream << "    1.0000    0.6667    0.6667;..." << std::endl;
   strstream << "%    1.0000    0.6825    0.6825;..." << std::endl;
   strstream << "    1.0000    0.6984    0.6984;..." << std::endl;
   strstream << "%    1.0000    0.7143    0.7143;..." << std::endl;
   strstream << "    1.0000    0.7302    0.7302;..." << std::endl;
   strstream << "%    1.0000    0.7460    0.7460;..." << std::endl;
   strstream << "    1.0000    0.7619    0.7619;..." << std::endl;
   strstream << "%    1.0000    0.7778    0.7778;..." << std::endl;
   strstream << "    1.0000    0.7937    0.7937;..." << std::endl;
   strstream << "%    1.0000    0.8095    0.8095;..." << std::endl;
   strstream << "    1.0000    0.8254    0.8254;..." << std::endl;
   strstream << "%    1.0000    0.8413    0.8413;..." << std::endl;
   strstream << "    1.0000    0.8571    0.8571;..." << std::endl;
   strstream << "%    1.0000    0.8730    0.8730;..." << std::endl;
   strstream << "    1.0000    0.8889    0.8889;..." << std::endl;
   strstream << "%    1.0000    0.9048    0.9048;..." << std::endl;
   strstream << "    1.0000    0.9206    0.9206;..." << std::endl;
   strstream << "%    1.0000    0.9365    0.9365;..." << std::endl;
   strstream << "    1.0000    0.9524    0.9524;..." << std::endl;
   strstream << "%    1.0000    0.9683    0.9683;..." << std::endl;
   strstream << "%    1.0000    0.9841    0.9841;..." << std::endl;
   strstream << "    1.0000    1.0000    1.0000];" << std::endl;
   strstream << "nc=size(blue,1);" << std::endl;
   strstream << "bluered=zeros(2*nc,3);" << std::endl;
   strstream << "bluered(1:nc,:)=red;" << std::endl;
   strstream << "for i=1:nc" << std::endl;
   strstream << "  bluered(i+nc,1:3)=blue(nc+1-i,1:3);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "" << std::endl;
   strstream << "redblue=zeros(2*nc,3);" << std::endl;
   strstream << "redblue(1:nc,:)=blue;" << std::endl;
   strstream << "for i=1:nc" << std::endl;
   strstream << "redblue(i+nc,1:3)=red(nc+1-i,1:3);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "" << std::endl; return strstream.str();};
// aflow_matlab_funcs.cpp automatic generated from MATLAB/plotband.m
// std::string MATLAB_FUNCS_plotband(std::string DIRECTORY,std::string OPTION1){
std::string MATLAB_FUNCS_plotband(void){
   std::stringstream strstream; strstream << "\
%script to plot band structures" << std::endl;
   strstream << "%the following files must reside in the directory" << std::endl;
   strstream << "%  DOSCAR.static.EXT" << std::endl;
   strstream << "%  POSCAR.bands" << std::endl;
   strstream << "%  EIGENVAL.bands" << std::endl;
   strstream << "%  KPOINTS.bands" << std::endl;
   strstream << "%  aflow.in (if not, LS need to be set manually)" << std::endl;
   strstream << "%set the ddir variable below to set the working directory" << std::endl;
   strstream << "%" << std::endl;
   strstream << "% 2011 - wahyu@alumni.duke.edu" << std::endl;
   strstream << "" << std::endl;
   strstream << "%-----TO SET-------------------------" << std::endl;
   strstream << "LS=false; %if LSCOUPLING=ON in aflow.in, it will be used to turn on LS in this script." << std::endl;
   strstream << "%ddir='./'; %working directory WAHYU" << std::endl;
   strstream << "ddir='./'; %working directory AFLOW" << std::endl;
   strstream << "%ytop and ybot will be determined dynamically based on Egap of DOS" << std::endl;
   strstream << "%ytop=1.5; %12;   %max energy in band structure plot" << std::endl;
   strstream << "%ybot=-1.5; %-10;  %min energy in band structure plot" << std::endl;
   strstream << "mode='c';  %'c'=cartesian (unit of kpoint segment is absolute)" << std::endl;
   strstream << "           %'d'=direct (unit of kpoint segment is fractional of k-lattices)" << std::endl;
   strstream << "scaleDOS=1.0; % zoom-in factor to rescale the plot " << std::endl;
   strstream << "DOSscalemode='normal';%for aflow" << std::endl;
   strstream << "%DOSscalemode='normal';" << std::endl;
   strstream << "%DOSscalemode='log';" << std::endl;
   strstream << "%-------------graphic parameters *****************" << std::endl;
   strstream << "FONTDIM=16;" << std::endl;
   strstream << "FONTDIMsmall=14;" << std::endl;
   strstream << "FONTDIMbig=18;" << std::endl;
   strstream << "COLOR=[0 0 0];" << std::endl;
   strstream << "LINEWIDTH=1.2;" << std::endl;
   strstream << "MARKERSIZE=25;" << std::endl;
   strstream << "PAPERPOSITION=[1 1 5 4]; % old for printing papers" << std::endl;
   strstream << "PAPERPOSITION=0.80*[0 0 18 9]; % standard ratio is 16/9;" << std::endl;
   strstream << "PAPERSIZE=[8.5 11];" << std::endl;
   strstream << "POSITION=[420 540 560 420]; % video" << std::endl;
   strstream << "AXISWIDTH=1;" << std::endl;
   strstream << "AXISPOSITION=[0.136646 0.164179 0.774845 0.74678];" << std::endl;
   strstream << "VERBOSE=1; " << std::endl;
   strstream << "%-------- getting LS from aflow.in -------------" << std::endl;
   strstream << "if(LS==false)" << std::endl;
   strstream << "[pin,msg]=fopen([ddir 'aflow.in'],'r');" << std::endl;
   strstream << "if(pin==-1) disp(msg)" << std::endl;
   strstream << "else" << std::endl;
   strstream << " while(~feof(pin))" << std::endl;
   strstream << "  sline=fgetl(pin);" << std::endl;
   strstream << "  icomment=strfind(sline,'#');" << std::endl;
   strstream << "  sLS=strfind(sline,'LSCOUPLING=ON');" << std::endl;
   strstream << "  if(length(sLS)>0)" << std::endl;
   strstream << "    if(length(icomment)<1) LS=true; break; " << std::endl;
   strstream << "    else if(sLS<icomment(1)) LS=true; break; end" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  sLS=strfind(sline,'LSCOUPLING =ON');" << std::endl;
   strstream << "  if(length(sLS)>0)" << std::endl;
   strstream << "    if(length(icomment)<1) LS=true; break;" << std::endl;
   strstream << "    else if(sLS<icomment(1)) LS=true; break; end" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  sLS=strfind(sline,'LSCOUPLING= ON');" << std::endl;
   strstream << "  if(length(sLS)>0)" << std::endl;
   strstream << "    if(length(icomment)<1) LS=true; break;" << std::endl;
   strstream << "    else if(sLS<icomment(1)) LS=true; break; end" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  sLS=strfind(sline,'LSCOUPLING = ON');" << std::endl;
   strstream << "  if(length(sLS)>0)" << std::endl;
   strstream << "    if(length(icomment)<1) LS=true; break;" << std::endl;
   strstream << "    else if(sLS<icomment(1)) LS=true; break; end" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << " end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "%---------------------------------------" << std::endl;
   strstream << "% POSCAR.bands" << std::endl;
   strstream << "%---------------------------------------" << std::endl;
   strstream << "%calculating recip. lattice vectors b1 b2 b3 from POSCAR" << std::endl;
   strstream << "pin=fopen([ddir 'POSCAR.bands'],'r');tmp=fgetl(pin);" << std::endl;
   strstream << "LattConst=fscanf(pin,'%f',1); tmp=fgetl(pin);" << std::endl;
   strstream << "a1(1:3)=fscanf(pin,'%f',3); tmp=fgetl(pin);" << std::endl;
   strstream << "a2(1:3)=fscanf(pin,'%f',3); tmp=fgetl(pin);" << std::endl;
   strstream << "a3(1:3)=fscanf(pin,'%f',3); tmp=fgetl(pin);" << std::endl;
   strstream << "a1=a1*LattConst; a2=a2*LattConst; a3=a3*LattConst;" << std::endl;
   strstream << "VCell=dot(cross(a2,a3),a1);" << std::endl;
   strstream << "b1=2*pi*cross(a2,a3)/VCell; b2=2*pi*cross(a3,a1)/VCell; b3=2*pi*cross(a1,a2)/VCell;" << std::endl;
   strstream << "%getting species and the number of species" << std::endl;
   strstream << "tmp=fgetl(pin);" << std::endl;
   strstream << "[species,Nspec]=sscanf(tmp,'%d');" << std::endl;
   strstream << "fclose(pin);" << std::endl;
   strstream << "%---------------------------------------" << std::endl;
   strstream << "% DOSCAR.static" << std::endl;
   strstream << "%---------------------------------------" << std::endl;
   strstream << "%getting compound name" << std::endl;
   strstream << "if (fopen([ddir 'DOSCAR.static.bz2'],'r')'>0')" << std::endl;
   strstream << "   system('bzcat DOSCAR.static.bz2 > DOSCAR.static.tmp');" << std::endl;
   strstream << "end" << std::endl;
   strstream << "if (fopen([ddir 'DOSCAR.static.xz'],'r')'>0')" << std::endl;
   strstream << "   system('xzcat DOSCAR.static.xz > DOSCAR.static.tmp');" << std::endl;
   strstream << "end" << std::endl;
   strstream << "if (fopen([ddir 'DOSCAR.static.gz'],'r')'>0')" << std::endl;
   strstream << "   system('gzcat DOSCAR.static.gz > DOSCAR.static.tmp');" << std::endl;
   strstream << "end" << std::endl;
   strstream << "if (fopen([ddir 'DOSCAR.static'],'r')'>0')" << std::endl;
   strstream << "   system('cat DOSCAR.static > DOSCAR.static.tmp');" << std::endl;
   strstream << "end" << std::endl;
   strstream << "" << std::endl;
   strstream << "din=fopen([ddir 'DOSCAR.static.tmp'],'r');" << std::endl;
   strstream << "tmp=fgetl(din); tmp=fgetl(din); tmp=fgetl(din); tmp=fgetl(din);" << std::endl;
   strstream << "name2=fscanf(din,'%s',1); tmp=fgetl(din);" << std::endl;
   strstream << "ii=0;name=name2;" << std::endl;
   strstream << "funderscore=false;" << std::endl;
   strstream << "for i=1:length(name2)" << std::endl;
   strstream << "    if(name2(i)>'0' && name2(i)<'9' && ~funderscore)" << std::endl;
   strstream << "        ii=ii+1; name(ii)='_';" << std::endl;
   strstream << "        ii=ii+1; name(ii)=name2(i);" << std::endl;
   strstream << "    elseif(name2(i)=='_')" << std::endl;
   strstream << "        funderscore=true;" << std::endl;
   strstream << "        ii=ii+1; name(ii)=' ';" << std::endl;
   strstream << "    else" << std::endl;
   strstream << "        ii=ii+1; name(ii)=name2(i);" << std::endl;
   strstream << "    end    " << std::endl;
   strstream << "end" << std::endl;
   strstream << "%getting EFdos, cbmdos and vbmdos" << std::endl;
   strstream << "Emax=fscanf(din,'%f',1);Emin=fscanf(din,'%f',1);" << std::endl;
   strstream << "NgridDOS=fscanf(din,'%d',1);EFdos=fscanf(din,'%f',1); tmp=fgetl(din);" << std::endl;
   strstream << "Egrid=(Emax-Emin)/NgridDOS;" << std::endl;
   strstream << "tol=5e-3;" << std::endl;
   strstream << "delE=1e6;delEE=delE;" << std::endl;
   strstream << "E=zeros(NgridDOS,1);" << std::endl;
   strstream << "D=zeros(NgridDOS,1);" << std::endl;
   strstream << "tmp=fgetl(din);" << std::endl;
   strstream << "[tmpV,count]=sscanf(tmp,'%f'); %getting ispin" << std::endl;
   strstream << "ispin=(count-1)/2;             %getting ispin" << std::endl;
   strstream << "isMetal=false;" << std::endl;
   strstream << "iclosest=1;" << std::endl;
   strstream << "E(1)=tmpV(1);  D(1)=tmpV(2);" << std::endl;
   strstream << "for i=2:NgridDOS" << std::endl;
   strstream << "    E(i)=fscanf(din,'%f',1); D(i)=fscanf(din,'%f',1); tmp=fgetl(din);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "tmp=fgetl(din);tmp=fgetl(din); %getting Norb" << std::endl;
   strstream << "[tmpV,count]=sscanf(tmp,'%f'); %getting Norb" << std::endl;
   strstream << "if(LS)" << std::endl;
   strstream << "  Norb=(count-1)/4;            %getting Norb" << std::endl;
   strstream << "else" << std::endl;
   strstream << "  Norb=(count-1)/ispin;        %getting Norb" << std::endl;
   strstream << "end" << std::endl;
   strstream << "switch Norb" << std::endl;
   strstream << "    case 1" << std::endl;
   strstream << "        orbital='s';" << std::endl;
   strstream << "    case 2" << std::endl;
   strstream << "        orbital='s p';" << std::endl;
   strstream << "    case 3" << std::endl;
   strstream << "        orbital='s p d';" << std::endl;
   strstream << "    case 4" << std::endl;
   strstream << "        orbital='s p d f';" << std::endl;
   strstream << "end" << std::endl;
   strstream << "for i=1:NgridDOS" << std::endl;
   strstream << "    if(abs(EFdos-E(i))<Egrid)" << std::endl;
   strstream << "        if(D(i)>tol && D(i+1)>tol) isMetal=true; break; %metal" << std::endl;
   strstream << "        end" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "for i=1:NgridDOS" << std::endl;
   strstream << "    Etmp=E(i); Dtmp=D(i);" << std::endl;
   strstream << "    if(Dtmp<tol) delEE=abs(EFdos-Etmp);" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "    if(delEE<delE) iclosest=i; delE=delEE;" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "for i=iclosest-1:-1:1" << std::endl;
   strstream << "  if(D(i)>tol) break;" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "vbmdos=E(i);" << std::endl;
   strstream << "for i=iclosest+1:NgridDOS" << std::endl;
   strstream << "  if(D(i)>tol) break;" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "cbmdos=E(i);" << std::endl;
   strstream << "if(isMetal)" << std::endl;
   strstream << "    cbmdos=EFdos; vbmdos=EFdos;" << std::endl;
   strstream << "end" << std::endl;
   strstream << "fclose(din);" << std::endl;
   strstream << "%automatic scaling for y-axis in band plot based on Egap of DOS" << std::endl;
   strstream << "%note that the actual gap should be determined from EIGENVAL due to" << std::endl;
   strstream << "%the smearing of DOS, however, it is good enough for plotting purposes" << std::endl;
   strstream << "EgDOS=cbmdos-vbmdos;" << std::endl;
   strstream << "ytop=EgDOS+log(2*EgDOS+1)+3;" << std::endl;
   strstream << "ybot=-3*log(2*EgDOS+1)-3;" << std::endl;
   strstream << "%---------------------------------------" << std::endl;
   strstream << "% KPOINTS.bands" << std::endl;
   strstream << "%---------------------------------------" << std::endl;
   strstream << "kin=fopen([ddir 'KPOINTS.bands'],'r');" << std::endl;
   strstream << "latt_type=fscanf(kin,'%s',1); tmp=fgetl(kin);" << std::endl;
   strstream << "disp(['LATTICE ' latt_type]);" << std::endl;
   strstream << "%getting Ngrid per segment in band structure" << std::endl;
   strstream << "Ngrid=fscanf(kin,'%d',1); tmp=fgetl(kin);" << std::endl;
   strstream << "%-----getting automatic klabel (aklabel) ------" << std::endl;
   strstream << "  NSEGMAX=50;" << std::endl;
   strstream << "  ksegdirect=zeros(NSEGMAX,4);" << std::endl;
   strstream << "  sline=fgetl(kin);" << std::endl;
   strstream << "  sline=fgetl(kin);" << std::endl;
   strstream << "  i=0;" << std::endl;
   strstream << "  aklabel='';" << std::endl;
   strstream << "  while(~feof(kin))" << std::endl;
   strstream << "    sline=fgetl(kin);sline2=sline;" << std::endl;
   strstream << "    [ftmp,count]=sscanf(sline,'%s');" << std::endl;
   strstream << "    if(count>3)" << std::endl;
   strstream << "      i=i+1;" << std::endl;
   strstream << "      for j=1:length(ftmp)" << std::endl;
   strstream << "	    if(ftmp(j)=='!') s=ftmp(j+1:length(ftmp)); end" << std::endl;
   strstream << "      end" << std::endl;
   strstream << "      if(strcmp(s,'Gamma') || strcmp(s,'gamma') || strcmp(s,'G')) s='\\Gamma'; end" << std::endl;
   strstream << "      %---The following line MUST be after the Gamma line above" << std::endl;
   strstream << "      if(strcmp(s,'Gg') || strcmp(s,'GG')) s='G'; end" << std::endl;
   strstream << "      if(strcmp(s,'Sigma') || strcmp(s,'sigma') || strcmp(s,'Sg') || strcmp(s,'sg')) s='\\Sigma'; end" << std::endl;
   strstream << "      if(i>1)" << std::endl;
   strstream << "	    if(mod(i,2)==0)" << std::endl;
   strstream << "          if(~strcmp(s,sb)) aklabel=strcat(aklabel,'-',s); end" << std::endl;
   strstream << "        end" << std::endl;
   strstream << "	    if(mod(i,2)==1)" << std::endl;
   strstream << "	      if(~strcmp(s,sb)) aklabel=strcat(aklabel,'|',s); end" << std::endl;
   strstream << "        end" << std::endl;
   strstream << "      else aklabel=strcat(aklabel,s);" << std::endl;
   strstream << "      end" << std::endl;
   strstream << "      sb=s;" << std::endl;
   strstream << "      ftmp=sscanf(sline2,'%f',3);" << std::endl;
   strstream << "      ksegdirect(i,1)=ftmp(1);" << std::endl;
   strstream << "      ksegdirect(i,2)=ftmp(2);" << std::endl;
   strstream << "      ksegdirect(i,3)=ftmp(3);" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  Nseg=i/2;" << std::endl;
   strstream << "  Nk=Nseg*Ngrid;" << std::endl;
   strstream << "  %constructing klinedirect from the norm of kpoints cascaded for continuous plot" << std::endl;
   strstream << "  klinedirect=zeros(Nk,1);" << std::endl;
   strstream << "  koffset=0; ind=1;" << std::endl;
   strstream << "  for iseg=1:Nseg" << std::endl;
   strstream << "    i = 2*iseg-1;" << std::endl;
   strstream << "    kx1=ksegdirect(i,1);    ky1=ksegdirect(i,2);    kz1=ksegdirect(i,3);" << std::endl;
   strstream << "    kx2=ksegdirect(i+1,1);  ky2=ksegdirect(i+1,2);  kz2=ksegdirect(i+1,3);" << std::endl;
   strstream << "    dkx = kx2-kx1;" << std::endl;
   strstream << "    dky = ky2-ky1;" << std::endl;
   strstream << "    dkz = kz2-kz1;" << std::endl;
   strstream << "    dk = (sqrt(dkx*dkx + dky*dky + dkz*dkz))/(Ngrid-1);" << std::endl;
   strstream << "    klinedirect(ind)=koffset; ind=ind+1;" << std::endl;
   strstream << "    for j=2:Ngrid" << std::endl;
   strstream << "      klinedirect(ind) = koffset+(j-1)*dk; ind=ind+1;" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "    koffset = koffset+dk*(Ngrid-1);" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  fclose(kin);" << std::endl;
   strstream << "%---creating up and dw to store eigenvalues" << std::endl;
   strstream << "%up=[Nseg*Ngrid,Nband]" << std::endl;
   strstream << "%-------------------------------" << std::endl;
   strstream << "% EIGENVAL.bands" << std::endl;
   strstream << "%-------------------------------" << std::endl;
   strstream << "  ein=fopen('EIGENVAL.bands','r');" << std::endl;
   strstream << "  sline=fgetl(ein);sline=fgetl(ein);sline=fgetl(ein);" << std::endl;
   strstream << "  sline=fgetl(ein);sline=fgetl(ein);" << std::endl;
   strstream << "  itmp=fscanf(ein,'%d',1); itmp=fscanf(ein,'%d',1); " << std::endl;
   strstream << "  Nband=fscanf(ein,'%d',1);  sline=fgetl(ein);" << std::endl;
   strstream << "  up=zeros(Nk,Nband);" << std::endl;
   strstream << "  if(ispin==2) dw=up; end" << std::endl;
   strstream << "  for i=1:Nk" << std::endl;
   strstream << "    ftmp=fscanf(ein,'%f',1); ftmp=fscanf(ein,'%f',1);" << std::endl;
   strstream << "    ftmp=fscanf(ein,'%f',1); ftmp=fscanf(ein,'%f',1);" << std::endl;
   strstream << "    for j=1:Nband" << std::endl;
   strstream << "      ftmp=fscanf(ein,'%f',1);  " << std::endl;
   strstream << "      ftmp=fscanf(ein,'%f',1);  " << std::endl;
   strstream << "	  up(i,j)=ftmp;" << std::endl;
   strstream << "      if(ispin==2) " << std::endl;
   strstream << "	    ftmp=fscanf(ein,'%f',1);" << std::endl;
   strstream << "		dw(i,j)=ftmp;" << std::endl;
   strstream << "      end" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  fclose(ein);" << std::endl;
   strstream << "%------------------------------" << std::endl;
   strstream << "%finding max valence band" << std::endl;
   strstream << "if(isMetal) maxEv=EFdos;" << std::endl;
   strstream << "else" << std::endl;
   strstream << " maxEv=EFdos-1000;" << std::endl;
   strstream << " for i=1:Nband" << std::endl;
   strstream << "  testband=up(:,i);" << std::endl;
   strstream << "  maxtest=max(testband);" << std::endl;
   strstream << "  if(maxtest>maxEv && maxtest<EFdos) maxEv=maxtest; end" << std::endl;
   strstream << " end" << std::endl;
   strstream << " if(ispin==2)" << std::endl;
   strstream << " for i=1:Nband" << std::endl;
   strstream << "  testband=dw(:,i);" << std::endl;
   strstream << "  maxtest=max(testband);" << std::endl;
   strstream << "  if(maxtest>maxEv && maxtest<EFdos) maxEv=maxtest; end" << std::endl;
   strstream << " end" << std::endl;
   strstream << " end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "%finding the vbmin" << std::endl;
   strstream << "tolDeg=0.026; %energy tolerance for degeneracy" << std::endl;
   strstream << "if(isMetal) vbmin=ybot;" << std::endl;
   strstream << "else" << std::endl;
   strstream << " vbmin=maxEv; %initialization" << std::endl;
   strstream << " if(ispin==1)" << std::endl;
   strstream << "  for ib=Nband:-1:2" << std::endl;
   strstream << "    testbandup=up(1:Nk,ib);" << std::endl;
   strstream << "	maxup=max(testbandup);" << std::endl;
   strstream << "	if(maxup-vbmin > (-tolDeg))" << std::endl;
   strstream << "	  vbminup=min(testbandup);" << std::endl;
   strstream << "          if(vbminup<vbmin) vbmin=vbminup; end" << std::endl;
   strstream << "	end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << " end" << std::endl;
   strstream << " if(ispin==2)" << std::endl;
   strstream << "  for ib=Nband:-1:2" << std::endl;
   strstream << "    testbandup=up(1:Nk,ib);" << std::endl;
   strstream << "	maxup=max(testbandup);" << std::endl;
   strstream << "    flagupcont=false;" << std::endl;
   strstream << "	if(maxup-vbmin > (-tolDeg))" << std::endl;
   strstream << "	  flagupcont = true;" << std::endl;
   strstream << "	  vbminup=min(testbandup);" << std::endl;
   strstream << "	  if(vbminup<vbmin) vbmin=vbminup; end" << std::endl;
   strstream << "	end" << std::endl;
   strstream << "    testbanddw=dw(1:Nk,ib);" << std::endl;
   strstream << "	maxdw=max(testbanddw);" << std::endl;
   strstream << "    flagdwcont=false;" << std::endl;
   strstream << "	if(maxdw-vbmin > (-tolDeg))" << std::endl;
   strstream << "	  flagdwcont = true;" << std::endl;
   strstream << "	  vbmindw=min(testbanddw);" << std::endl;
   strstream << "	  if(vbmindw<vbmin) vbmin=vbmindw; end" << std::endl;
   strstream << "	end" << std::endl;
   strstream << "	if(flagupcont==false && flagdwcont==false) break; end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << " end" << std::endl;
   strstream << "end%if(isMetal==false)" << std::endl;
   strstream << "if (vbmin == maxEv)" << std::endl;
   strstream << "    if ( maxEv < EFdos )" << std::endl;
   strstream << "        maxEv = EFdos;" << std::endl;
   strstream << "    else" << std::endl;
   strstream << "        vbmin = EFdos;" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "%---------------------------------------" << std::endl;
   strstream << "%calculating the boundary k(s) for each segment in cartesian coordinate" << std::endl;
   strstream << "for iseg=1:Nseg*2" << std::endl;
   strstream << "  dummy=ksegdirect(iseg,1:3);" << std::endl;
   strstream << "  dummy=dummy(1)*b1+dummy(2)*b2+dummy(3)*b3;" << std::endl;
   strstream << "  ksegcart(iseg,1:3)=dummy;" << std::endl;
   strstream << "end" << std::endl;
   strstream << "klinecart=zeros(Nk,1);" << std::endl;
   strstream << "kposxdirect=zeros(Nseg,1);" << std::endl;
   strstream << "kposxcart=zeros(Nseg,1);" << std::endl;
   strstream << "tnormcart=norm(ksegcart(1,1:3));" << std::endl;
   strstream << "for iseg=1:Nseg" << std::endl;
   strstream << "  ka=ksegdirect(2*iseg-1,1:3);     kb=ksegdirect(2*iseg,1:3);" << std::endl;
   strstream << "  kposxdirect(iseg+1)=kposxdirect(iseg)+norm(kb-ka);" << std::endl;
   strstream << "  ka=ksegcart(2*iseg-1,1:3);     kb=ksegcart(2*iseg,1:3);" << std::endl;
   strstream << "  kposxcart(iseg+1)=kposxcart(iseg)+norm(kb-ka);" << std::endl;
   strstream << "  klinecart((iseg-1)*Ngrid+1:iseg*Ngrid)=kposxcart(iseg)+linspace(0,norm(kb-ka),Ngrid);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "k=klinecart;" << std::endl;
   strstream << "kposx=kposxcart;" << std::endl;
   strstream << "if(mode=='d')" << std::endl;
   strstream << "  k=klinedirect;" << std::endl;
   strstream << "  kposx=kposxdirect;" << std::endl;
   strstream << "end" << std::endl;
   strstream << "%---------------------------------------" << std::endl;
   strstream << "% PLOT   PLOT   PLOT" << std::endl;
   strstream << "%---------------------------------------" << std::endl;
   strstream << "iplot=1;" << std::endl;
   strstream << "if(iplot)" << std::endl;
   strstream << "H_FIGURE=figure(1);clf;" << std::endl;
   strstream << "set(H_FIGURE,'PaperUnits','inches');" << std::endl;
   strstream << "set(H_FIGURE,'PaperOrientation','portrait');" << std::endl;
   strstream << "set(H_FIGURE,'PaperPosition',PAPERPOSITION); % left top width height" << std::endl;
   strstream << "set(H_FIGURE,'PaperSize',PAPERSIZE);" << std::endl;
   strstream << "set(H_FIGURE,'PaperType','usletter');" << std::endl;
   strstream << "set(H_FIGURE,'Position',POSITION);" << std::endl;
   strstream << "" << std::endl;
   strstream << "axorig=[0.13 0.11 0.775 0.815]; " << std::endl;
   strstream << "ax1=axes('position',[0.1 0.1 0.59 0.8]);" << std::endl;
   strstream << "set(gca,'fontsize',16);" << std::endl;
   strstream << "set(gca,'linewidth',0.8);" << std::endl;
   strstream << "for i=1:Nband" << std::endl;
   strstream << "	hold on; plot(k,up(:,i)-maxEv,'k','linewidth',0.8);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "if(ispin==2)" << std::endl;
   strstream << "for i=1:Nband" << std::endl;
   strstream << "	hold on; plot(k,dw(:,i)-maxEv,'k','linewidth',0.8);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "plot([min(k) max(k)],[0 0],'g:','linewidth',0.8);   % STEFANO EF " << std::endl;
   strstream << "drawnow;" << std::endl;
   strstream << "axis([0 max(k) ybot ytop]);" << std::endl;
   strstream << "box on;" << std::endl;
   strstream << "ylabel('E (eV)','fontsize',18);" << std::endl;
   strstream << "klabel=aklabel;  %aklabel is automatic label read from KPOINTS" << std::endl;
   strstream << "disp(['KLABEL ' klabel]);" << std::endl;
   strstream << "" << std::endl;
   strstream << "iLbot=1; iLtop=1;" << std::endl;
   strstream << "for i=1:Nseg+1" << std::endl;
   strstream << "    if(i==1) iLbot=0; end" << std::endl;
   strstream << "    fLtop=0;" << std::endl;
   strstream << "    for iL=iLbot+1:length(klabel)" << std::endl;
   strstream << "        if(klabel(iL)=='-')" << std::endl;
   strstream << "            fLtop=1;" << std::endl;
   strstream << "            iLtop=iL;" << std::endl;
   strstream << "            break;" << std::endl;
   strstream << "        end" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "    if(i==Nseg+1) iLtop=length(klabel)+1; end" << std::endl;
   strstream << "    kklabel=klabel(iLbot+1:iLtop-1);" << std::endl;
   strstream << "    iLbot=iLtop;" << std::endl;
   strstream << "    text(kposx(i)-(max(k)-min(k))*0.015,ybot-(ytop-ybot)*0.035,kklabel,'fontsize',18);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "title([name ' (' latt_type ')'],'fontsize',18);" << std::endl;
   strstream << "set(gca,'xtick',[-10 max(kposx)+10]);" << std::endl;
   strstream << "for i=2:length(kposx)-1" << std::endl;
   strstream << "    hold on; plot([kposx(i) kposx(i)],[ybot ytop],'k--','linewidth',0.8);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "end%if (iplot)" << std::endl;
   strstream << "%------------------------------------" << std::endl;
   strstream << "%Reading orbital-projected DOS" << std::endl;
   strstream << "%------------------------------------" << std::endl;
   strstream << "DO_S=false;" << std::endl;
   strstream << "DO_P=false;" << std::endl;
   strstream << "DO_D=false;" << std::endl;
   strstream << "DO_F=false;" << std::endl;
   strstream << "if(Norb>=1) DO_S=true; end" << std::endl;
   strstream << "if(Norb>=2) DO_P=true; end" << std::endl;
   strstream << "if(Norb>=3) DO_D=true; end" << std::endl;
   strstream << "if(Norb>=4) DO_F=true; end" << std::endl;
   strstream << "din=fopen('DOSCAR.static.tmp','r');" << std::endl;
   strstream << "sline=fgetl(din); sline=fgetl(din); sline=fgetl(din);" << std::endl;
   strstream << "sline=fgetl(din); sline=fgetl(din); " << std::endl;
   strstream << "maxE=fscanf(din,'%f',1);" << std::endl;
   strstream << "minE=fscanf(din,'%f',1);" << std::endl;
   strstream << "nE=fscanf(din,'%d',1); sline=fgetl(din);  " << std::endl;
   strstream << "%//energy loop for DOS" << std::endl;
   strstream << "%//only DOS will be considered and written out because the Integrated DOS" << std::endl;
   strstream << "%//can be calculated from DOS and energy bins" << std::endl;
   strstream << "if(LS) Ncol=1+1+Norb*Nspec;" << std::endl;
   strstream << "else Ncol=1+(1+Norb*Nspec)*ispin;" << std::endl;
   strstream << "end" << std::endl;
   strstream << "EDOS=zeros(nE,Ncol);" << std::endl;
   strstream << "for i=1:nE" << std::endl;
   strstream << "   EDOS(i,1)=fscanf(din,'%f',1);%E" << std::endl;
   strstream << "   EDOS(i,2)=fscanf(din,'%f',1);%total DOS or total DOS_up" << std::endl;
   strstream << "   if(ispin==2) EDOS(i,3)=-fscanf(din,'%f',1); end%total DOS_dw" << std::endl;
   strstream << "   sline=fgetl(din);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "%//energy loop for DOS for s,p,d,f" << std::endl;
   strstream << "%//sum over all atoms of the same specie" << std::endl;
   strstream << "%//format  E dos s s s p p p d d d f f f" << std::endl;
   strstream << "%//if ispin=2 (spin on), each dos or s,p,d,f will be: up -down" << std::endl;
   strstream << "if(LS)" << std::endl;
   strstream << " ioffset=0;" << std::endl;
   strstream << " for i=1:Nspec" << std::endl;
   strstream << "  for j=1:species(i)" << std::endl;
   strstream << "    sline=fgetl(din);" << std::endl;
   strstream << "    for k=1:nE" << std::endl;
   strstream << "      ftmp=fscanf(din,'%f',1);%discard energy" << std::endl;
   strstream << "        for iorb=1:Norb" << std::endl;
   strstream << "          ftmp=fscanf(din,'%f',1); " << std::endl;
   strstream << "          ioffset=(iorb-1)*Nspec;" << std::endl;
   strstream << "          EDOS(k,ioffset+2+i)=EDOS(k,ioffset+2+i)+ftmp;" << std::endl;
   strstream << "          ftmp=fscanf(din,'%f',1); %discard x component" << std::endl;
   strstream << "          ftmp=fscanf(din,'%f',1); %discard y component" << std::endl;
   strstream << "          ftmp=fscanf(din,'%f',1); %discard z component" << std::endl;
   strstream << "        end" << std::endl;
   strstream << "        sline=fgetl(din);" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << " end" << std::endl;
   strstream << "else" << std::endl;
   strstream << " ioffset=0;" << std::endl;
   strstream << " for i=1:Nspec" << std::endl;
   strstream << "  for j=1:species(i)" << std::endl;
   strstream << "    sline=fgetl(din);" << std::endl;
   strstream << "    for k=1:nE" << std::endl;
   strstream << "      ftmp=fscanf(din,'%f',1);%discard energy" << std::endl;
   strstream << "      if(ispin==1)" << std::endl;
   strstream << "        for iorb=1:Norb" << std::endl;
   strstream << "          ftmp=fscanf(din,'%f',1); " << std::endl;
   strstream << "          ioffset=(iorb-1)*Nspec*ispin;" << std::endl;
   strstream << "          EDOS(k,ioffset+2+i)=EDOS(k,ioffset+2+i)+ftmp;" << std::endl;
   strstream << "        end" << std::endl;
   strstream << "        sline=fgetl(din);" << std::endl;
   strstream << "      end" << std::endl;
   strstream << "      if(ispin==2)" << std::endl;
   strstream << "        for iorb=1:Norb" << std::endl;
   strstream << "          ftmp=fscanf(din,'%f',1);" << std::endl;
   strstream << "          ioffset=(iorb-1)*Nspec*ispin;" << std::endl;
   strstream << "          EDOS(k,ioffset+4+(i-1)*ispin)=EDOS(k,ioffset+4+(i-1)*ispin)+ftmp;%//up" << std::endl;
   strstream << "          ftmp=fscanf(din,'%f',1);" << std::endl;
   strstream << "          EDOS(k,ioffset+4+(i-1)*ispin+1)=EDOS(k,ioffset+4+(i-1)*ispin+1)-ftmp;%//-down" << std::endl;
   strstream << "        end" << std::endl;
   strstream << "        sline=fgetl(din);" << std::endl;
   strstream << "      end" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << " end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "fclose(din);" << std::endl;
   strstream << "system('rm -f DOSCAR.static.tmp');" << std::endl;
   strstream << "%------------------------------------" << std::endl;
   strstream << "%finding the appropriate scaling for DOS plotting" << std::endl;
   strstream << "istop=size(EDOS,2);" << std::endl;
   strstream << "istart=3;" << std::endl;
   strstream << "if(ispin==2) istart=istart+1; end" << std::endl;
   strstream << "xdosmax=0;" << std::endl;
   strstream << "for i=1:nE" << std::endl;
   strstream << "    if(EDOS(i,1)>vbmin && EDOS(i,1)<maxEv)" << std::endl;
   strstream << "        linetmp=abs(EDOS(i,istart:istop));" << std::endl;
   strstream << "        maxtmp=max(linetmp);" << std::endl;
   strstream << "        if(maxtmp>xdosmax) xdosmax=maxtmp; end" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "xdosmax=xdosmax*ispin; %since we will plot the total DOS up+down." << std::endl;
   strstream << "%------------------------------------" << std::endl;
   strstream << "DOSup=EDOS(:,2);" << std::endl;
   strstream << "DOSdw=zeros(nE,1);" << std::endl;
   strstream << "ic=2;" << std::endl;
   strstream << "if(ispin==2) ic=ic+1; DOSdw=EDOS(:,ic); end" << std::endl;
   strstream << "%----------S-------" << std::endl;
   strstream << "ic=ic+1;" << std::endl;
   strstream << "Sup=0;Sdown=0;" << std::endl;
   strstream << "if(ispin==1)" << std::endl;
   strstream << "  for ispec=1:Nspec " << std::endl;
   strstream << "    Sup=Sup+EDOS(:,ic+(ispec-1)); " << std::endl;
   strstream << "  end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "if(ispin==2)" << std::endl;
   strstream << "  for ispec=1:Nspec" << std::endl;
   strstream << "    Sup=Sup+EDOS(:,ic+(ispec-1)*2);" << std::endl;
   strstream << "    Sdown=Sdown+EDOS(:,ic+(ispec-1)*2+1);" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "end" << std::endl;
   strstream << "ic=ic+Nspec*(ispin);" << std::endl;
   strstream << "%---------P--------" << std::endl;
   strstream << "Pup=0; Pdown=0;" << std::endl;
   strstream << "if(Norb>1)" << std::endl;
   strstream << "  if(ispin==1)" << std::endl;
   strstream << "    for ispec=1:Nspec" << std::endl;
   strstream << "      Pup=Pup+EDOS(:,ic+(ispec-1));" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  if(ispin==2)" << std::endl;
   strstream << "    for ispec=1:Nspec" << std::endl;
   strstream << "      Pup=Pup+EDOS(:,ic+(ispec-1)*2);" << std::endl;
   strstream << "      Pdown=Pdown+EDOS(:,ic+(ispec-1)*2+1);" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  ic=ic+Nspec*(ispin);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "%----------D---------" << std::endl;
   strstream << "Dup=0; Ddown=0;" << std::endl;
   strstream << "if(Norb>2)" << std::endl;
   strstream << "  if(ispin==1)" << std::endl;
   strstream << "    for ispec=1:Nspec" << std::endl;
   strstream << "      Dup=Dup+EDOS(:,ic+(ispec-1));" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  if(ispin==2)" << std::endl;
   strstream << "    for ispec=1:Nspec" << std::endl;
   strstream << "      Dup=Dup+EDOS(:,ic+(ispec-1)*2);" << std::endl;
   strstream << "      Ddown=Ddown+EDOS(:,ic+(ispec-1)*2+1);" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  ic=ic+Nspec*(ispin);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "%----------F---------" << std::endl;
   strstream << "Fup=0; Fdown=0;" << std::endl;
   strstream << "if(Norb==4)" << std::endl;
   strstream << "  if(ispin==1)" << std::endl;
   strstream << "  for ispec=1:Nspec" << std::endl;
   strstream << "    Fup=Fup+EDOS(:,ic+(ispec-1));" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  if(ispin==2)" << std::endl;
   strstream << "    for ispec=1:Nspec" << std::endl;
   strstream << "      Fup=Fup+EDOS(:,ic+(ispec-1)*2);" << std::endl;
   strstream << "      Fdown=Fdown+EDOS(:,ic+(ispec-1)*2+1);" << std::endl;
   strstream << "    end" << std::endl;
   strstream << "  end" << std::endl;
   strstream << "  ic=ic+Nspec*(ispin);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "" << std::endl;
   strstream << "iplot=true;" << std::endl;
   strstream << "if(iplot)" << std::endl;
   strstream << "ax2=axes('position',[0.7 0.1 0.2 0.8]);" << std::endl;
   strstream << "set(gca,'fontsize',16);" << std::endl;
   strstream << "set(gca,'linewidth',0.8);" << std::endl;
   strstream << "" << std::endl;
   strstream << "switch Norb" << std::endl;
   strstream << " case 1" << std::endl;
   strstream << "   if(strcmp(DOSscalemode,'log'))" << std::endl;
   strstream << "     semilogx((Sup-Sdown),EDOS(:,1)-maxEv,'k:','linewidth',1.2);" << std::endl;
   strstream << "   end" << std::endl;
   strstream << "   if(strcmp(DOSscalemode,'normal'))" << std::endl;
   strstream << "     plot((Sup-Sdown),EDOS(:,1)-maxEv,'k:','linewidth',1.2);" << std::endl;
   strstream << "   end" << std::endl;
   strstream << "   legend('s');" << std::endl;
   strstream << " case 2" << std::endl;
   strstream << "   if(strcmp(DOSscalemode,'log'))" << std::endl;
   strstream << "     semilogx((Sup-Sdown),EDOS(:,1)-maxEv,'k:','linewidth',1.2);" << std::endl;
   strstream << "     hold on;semilogx((Pup-Pdown),EDOS(:,1)-maxEv,'b-.','linewidth',0.8);" << std::endl;
   strstream << "   end" << std::endl;
   strstream << "   if(strcmp(DOSscalemode,'normal'))" << std::endl;
   strstream << "     plot((Sup-Sdown),EDOS(:,1)-maxEv,'k:','linewidth',1.2);" << std::endl;
   strstream << "     hold on;plot((Pup-Pdown),EDOS(:,1)-maxEv,'b-.','linewidth',0.8);" << std::endl;
   strstream << "   end" << std::endl;
   strstream << "   drawnow;" << std::endl;
   strstream << "   legend('s','p');" << std::endl;
   strstream << " case 3" << std::endl;
   strstream << "   if(strcmp(DOSscalemode,'log'))" << std::endl;
   strstream << "     semilogx((Sup-Sdown),EDOS(:,1)-maxEv,'k:','linewidth',1.2);" << std::endl;
   strstream << "     hold on;semilogx((Pup-Pdown),EDOS(:,1)-maxEv,'b-.','linewidth',0.8);" << std::endl;
   strstream << "     hold on;semilogx((Dup-Ddown),EDOS(:,1)-maxEv,'r--','linewidth',0.8);" << std::endl;
   strstream << "   end" << std::endl;
   strstream << "   if(strcmp(DOSscalemode,'normal'))" << std::endl;
   strstream << "     plot((Sup-Sdown),EDOS(:,1)-maxEv,'k:','linewidth',1.2);" << std::endl;
   strstream << "     hold on;plot((Pup-Pdown),EDOS(:,1)-maxEv,'b-.','linewidth',0.8);" << std::endl;
   strstream << "     hold on;plot((Dup-Ddown),EDOS(:,1)-maxEv,'r--','linewidth',0.8);" << std::endl;
   strstream << "   end" << std::endl;
   strstream << "   drawnow;" << std::endl;
   strstream << "   legend('s','p','d');" << std::endl;
   strstream << " case 4" << std::endl;
   strstream << "   if(strcmp(DOSscalemode,'log'))" << std::endl;
   strstream << "     semilogx((Sup-Sdown),EDOS(:,1)-maxEv,'k:','linewidth',1.2);" << std::endl;
   strstream << "     hold on;semilogx((Pup-Pdown),EDOS(:,1)-maxEv,'b-.','linewidth',0.8);" << std::endl;
   strstream << "     hold on;semilogx((Dup-Ddown),EDOS(:,1)-maxEv,'r--','linewidth',0.8);" << std::endl;
   strstream << "     hold on;semilogx((Fup-Fdown),EDOS(:,1)-maxEv,'g-','linewidth',0.8);" << std::endl;
   strstream << "   end" << std::endl;
   strstream << "   if(strcmp(DOSscalemode,'normal'))" << std::endl;
   strstream << "     plot((Sup-Sdown),EDOS(:,1)-maxEv,'k:','linewidth',1.2);" << std::endl;
   strstream << "     hold on;plot((Pup-Pdown),EDOS(:,1)-maxEv,'b-.','linewidth',0.8);" << std::endl;
   strstream << "     hold on;plot((Dup-Ddown),EDOS(:,1)-maxEv,'r--','linewidth',0.8);" << std::endl;
   strstream << "     hold on;plot((Fup-Fdown),EDOS(:,1)-maxEv,'g-','linewidth',0.8);" << std::endl;
   strstream << "   end" << std::endl;
   strstream << "   drawnow;" << std::endl;
   strstream << "   legend('s','p','d','f');" << std::endl;
   strstream << " otherwise" << std::endl;
   strstream << " ;" << std::endl;
   strstream << "end" << std::endl;
   strstream << "if ( xdosmax == 0 ) xdosmax = 1; end" << std::endl;
   strstream << "plot([0 xdosmax/scaleDOS],[0 0],'g:','linewidth',0.8);     % STEFANO EF" << std::endl;
   strstream << "drawnow;" << std::endl;
   strstream << "" << std::endl;
   strstream << "axis([0 xdosmax/scaleDOS ybot ytop]);" << std::endl;
   strstream << "set(gca,'ytick',[ybot-10 ytop+10]);" << std::endl;
   strstream << "set(gca,'xtick',[-10 xdosmax/scaleDOS+10]);" << std::endl;
   strstream << "box on;" << std::endl;
   strstream << "if(strcmp(DOSscalemode,'log'))" << std::endl;
   strstream << "  xlabel('log(N(E))','fontsize',18);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "if(strcmp(DOSscalemode,'normal'))" << std::endl;
   strstream << "  xlabel('N(E)','fontsize',18);" << std::endl;
   strstream << "end" << std::endl;
   strstream << "" << std::endl;
   strstream << "eval(['print -depsc ' 'figband_' name2 '.eps']);" << std::endl;
   strstream << "system(['convert figband_' name2 '.eps ' name2 '.jpg']);" << std::endl;
   strstream << "system(['convert figband_' name2 '.eps ' name2 '.pdf']);" << std::endl;
   strstream << "system(['convert figband_' name2 '.eps ' name2 '.png']);" << std::endl;
   strstream << "end%if (iplot)" << std::endl;
   strstream << "" << std::endl;
   strstream << "" << std::endl;
   strstream << "beep" << std::endl;
   strstream << "beep" << std::endl;
   strstream << "beep" << std::endl;
   strstream << "" << std::endl;
   strstream << "exit;" << std::endl;
   strstream << "" << std::endl;
   strstream << "" << std::endl;
   strstream << "exit;" << std::endl;
   strstream << "" << std::endl; return strstream.str();};
#endif // _AFLOW_MATLAB_FUNCS_CPP_
